---
title: "Final Project Report: Demolishing vs. Elevating Existing Homes"
author: "Taigen Hunter-Galvan (tmh12)"
jupyter: julia-1.10
date: 2024-04-30

# PDF
# Feel free to customize the look of your final document:
# https://quarto.org/docs/reference/formats/pdf.html

format: 
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true


date-format: "ddd., MMM. D"

# See Quarto docs: https://quarto.org/docs/authoring/footnotes-and-citations.html
# you can export your references from Zotero, EndNote, or other reference managers
# from Zotero you'll need https://retorque.re/zotero-better-bibtex/
references: references.bib

# recommended, but not required
# you will need jupyter-cache installed
execute: 
  cache: true
---

# Introduction


## Problem Statement

Clearly define the problem statement that your chosen feature aims to address.
Explain the significance of this problem in the context of climate risk management.

## Selected Feature

Describe the feature you have selected to add to the existing decision-support tool.
Discuss how this feature relates to the problem statement and its potential to improve climate risk assessment.

# Literature Review

Provide a brief overview of the theoretical background related to your chosen feature.
Cite at least two relevant journal articles to support your approach (see [Quarto docs](https://quarto.org/docs/authoring/footnotes-and-citations.html) for help with citations).
Explain how these articles contribute to the justification of your selected feature.

# Methodology

```{julia}
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using LaTeXStrings
using Metaheuristics
using Plots
using Random
using Unitful

Plots.default(; margin=5Plots.mm)
```

```{julia}
using Revise
using HouseElevation
```


```{julia}
#| output: false
house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    desc = "two story, no basement, Structure"
    row = @rsubset(haz_fl_dept, :Column1 == 98)[1, :] # select the row I want
    area = 1300u"ft^2"
    height_above_gauge = 5u"ft"
    House(row; area=area, height_above_gauge=height_above_gauge, value_usd=253_100)
end

p = ModelParams(; house=house, years=2024:2083)
```


```{julia}
#| output: false
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end

function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.25))
    ξ = rand(Normal(0.1, 0.05))
    return GeneralizedExtremeValue(μ, σ, ξ)
end

function draw_discount_rate()
    return rand(Normal(0.05, 0.03))
end

function draw_sow()
    slr = rand(slr_scenarios)
    surge_params = draw_surge_distribution()
    discount = draw_discount_rate()
    return SOW(slr, surge_params, discount)
end
```


```{julia}
#| output: false
Random.seed!(421521)
N_SOW = 10_000
N_SOW_opt = 10 # to start
sows = [draw_sow() for _ in 1:N_SOW]
sows_opt = first(sows, N_SOW_opt)
```

```{julia}
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

#N_more = 500
npvs_levee = [mean([run_sim(a, sow, p, 11.0) for sow in sows_opt]) for a in actions_try]

npvs_no_levee = [mean([run_sim(a, sow, p, 0.0) for sow in sows_opt]) for a in actions_try]


```

```{julia}
#min.(npvs_levee) #minimum npv list 
#npvs_list = collect(npvs_levee)
#println(argmax(npvs_list))

function levee_sim(height) 
    npvs = [mean([run_sim(a, sow, p, height) for sow in sows_opt]) for a in actions_try]
    optimal_val = argmax(npvs)
    optimal_npv = npvs[optimal_val]
    optimal_height = elevations_try[optimal_val]

    return npvs, optimal_npv, optimal_height
end
```

```{julia}

function plot_results(height)
#height = 11.0


    npvs, best_npv, best_elevation = levee_sim(height)

    plot(
        elevations_try,
        npvs ./ 1000;
        xlabel="Elevation [ft]",
        ylabel="NPV [1000 USD]",
        label="$(height)ft Levee",
        marker=:circle,
    )

    vline!([best_elevation]; label="$(best_elevation)ft Optimal - Levee", linestyle=:dash)


    plot!(
    elevations_try,
    npvs_no_levee ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    label="$(height)ft No Levee",
    marker=:circle,
    legend=:bottomright
)

    npvs, best_npv, opt_nolevee = levee_sim(0.0)

    vline!([opt_nolevee]; label="$(opt_nolevee)ft Optimal - No Levee", linestyle=:dash)

end
```

```{julia}
plot_results(10.0)

```

```{julia}
function plot_optimal(height_list)
    optimal_npvs = []
    for height in height_list
        npvs, best_npv, best_elevation = levee_sim(height)
        push!(optimal_npvs, best_npv)
    end
    return optimal_npvs
end
```

```{julia}
height_list = range(0.0; step=1.0, stop=35.0) #25-30ft diminishing return
optimal_npvs = plot_optimal(height_list)
```

```{julia}
npvs, best_npv0, best_elevation = levee_sim(0.0)
npvs, best_npv20, best_elevation = levee_sim(20.0)

levee_npvsavings = best_npv20-best_npv0
println(levee_npvsavings)

galveston_homes = 33979
total_savings = levee_npvsavings*galveston_homes
println(total_savings)

```

```{julia}
plot(
    height_list,
    optimal_npvs ./ 1000;
    xlabel="Levee Height [ft]",
    ylabel="NPV [1000 USD]",
    #label="Levee",
    marker=:circle,
)
```


## Implementation

You should make your modifications in either the `HouseElevation` or `ParkingGarage` module.
Detail the steps taken to implement the selected feature and integrate it into the decision-support tool.
Include code snippets and explanations where necessary to clarify the implementation process.



## Validation

As we have seen in labs, mistakes are inevitable and can lead to misleading results.
To minimize the risk of errors making their way into final results, it is essential to validate the implemented feature.
Describe the validation techniques used to ensure the accuracy and reliability of your implemented feature.
Discuss any challenges faced during the validation process and how they were addressed.

# Results

Present the results obtained from the enhanced decision-support tool.
Use tables, figures, and visualizations to clearly communicate the outcomes.
Provide sufficient detail to demonstrate how the implemented feature addresses the problem statement.
Use the `#| output: false` and/or `#| echo: false` tags to hide code output and code cells in the final report except where showing the output (e.g.g, a plot) or the code (e.g., how you are sampling SOWs) adds value to the discussion.
You may have multiple subsections of results, which you can create using `##`.

# Conclusions


## Discussion

Analyze the implications of your results for climate risk management.
Consider the context of the class themes and discuss how your findings contribute to the understanding of climate risk assessment.
Identify any limitations of your approach and suggest potential improvements for future work.

## Conclusions

Summarize the key findings of your project and reiterate the significance of your implemented feature in addressing the problem statement.
Discuss the broader implications of your work for climate risk management and the potential for further research in this area.

# References

:::{#refs}
:::